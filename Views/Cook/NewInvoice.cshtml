@model InvoiceViewModel

<div class="container mt-4">
    <h2>Створення накладної</h2>
    <div class="card">
        <div class="card-body">
            <h5 class="card-title mb-4">Товари</h5>
            <div id="productsList">
                <!-- Убираем начальную разметку отсюда, теперь она будет добавляться только через JavaScript -->
            </div>
            <div class="mt-3">
                <button type="button" class="btn btn-secondary" onclick="addProduct()">
                    <i class="fas fa-plus me-2"></i>Додати товар
                </button>
            </div>
        </div>
    </div>

    <div class="mt-4 text-end">
        <button type="button" class="btn btn-secondary me-2" onclick="window.location.href='/Cook/CreateInvoice'">
            Скасувати
        </button>
        <button type="button" class="btn btn-primary" onclick="saveInvoice()">
            СТВОРИТИ НАКЛАДНУ
        </button>
    </div>
</div>

@section Scripts {
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script>
        const products = @Json.Serialize(ViewBag.Products ?? new List<ProductViewModel>());

        function initSelect2(element) {
            $(element).select2({
                placeholder: "Оберіть товар...",
                allowClear: true,
                width: '100%',
                language: {
                    noResults: function() {
                        return "Нічого не знайдено";
                    },
                    searching: function() {
                        return "Пошук...";
                    }
                }
            });
        }

        function addProduct() {
            const productOptions = products.map(p => 
                `<option value="${p.id}">${p.name}</option>`
            ).join('');

            const rowHtml = `
                <div class="row mb-3 product-row">
                    <div class="col-md-4">
                        <label class="mb-2">Товар</label>
                        <select class="form-select product-select">
                            <option value="">Оберіть товар...</option>
                            ${productOptions}
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="mb-2">Одиниця виміру</label>
                        <select class="form-select measure-select">
                            <option value="">Виберіть одиницю</option>
                            <option value="Кг">Кілограми</option>
                            <option value="Л">Літри</option>
                            <option value="Шт">Штуки</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="mb-2">Кількість</label>
                        <div class="input-group">
                            <input type="number" class="form-control amount-input" min="0.01" step="0.01" style="flex: none; width: 100%; height: 38px" />
                        </div>
                    </div>
                    <div class="col-md-2">
                        <button type="button" class="btn btn-danger d-block w-100 mt-4" onclick="removeProduct(this)">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>`;
            
            const container = document.getElementById('productsList');
            container.insertAdjacentHTML('beforeend', rowHtml);
            
            initSelect2(container.lastElementChild.querySelector('.product-select'));
        }

        function removeProduct(button) {
            button.closest('.product-row').remove();
        }

        function saveInvoice() {
            const products = [];
            const rows = document.querySelectorAll('.product-row');

            rows.forEach(row => {
                const productId = row.querySelector('.product-select').value;
                const measure = row.querySelector('.measure-select').value;
                const amount = row.querySelector('.amount-input').value;

                if (productId && measure && amount > 0) {
                    products.push({
                        productId: parseInt(productId),
                        measure: measure,
                        amount: parseFloat(amount)
                    });
                }
            });

            if (products.length === 0) {
                alert('Додайте хоча б один продукт');
                return;
            }

            fetch('/Cook/NewInvoice', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ products: products })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.href = '/Cook/CreateInvoice';
                } else {
                    throw new Error(data.error || 'Помилка при збереженні накладної');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Помилка при збереженні накладної');
            });
        }

        // Добавляем только один товар при загрузке страницы
        document.addEventListener('DOMContentLoaded', function() {
            // Проверяем, пустой ли список продуктов
            if (document.querySelectorAll('.product-row').length === 0) {
                addProduct();
            }
        });
    </script>
}